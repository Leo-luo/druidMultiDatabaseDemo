<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"  
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="  
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-3.0.xsd  
            http://www.springframework.org/schema/jee 
            http://www.springframework.org/schema/jee/spring-jee-3.0.xsd  
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
						
	<bean id="webConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config/config.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 数据源定义文件 -->  
    <context:property-placeholder location="classpath*:config/config.properties" /> 
	
	<!-- 设置数据源属性 -->  
    <bean id="dataSourceRead" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
        init-method="init" destroy-method="close">  
        <property name="uniqueResourceName" value="read_resource" />    
        <property name="xaDataSourceClassName" value="com.alibaba.druid.pool.xa.DruidXADataSource" />    
    	<property name="xaProperties">    
        <props>    
        	<!-- 数据库驱动 -->
        	<prop key="driverClassName">${jdbc.conn.driverClassName}</prop>    
        	<!-- 数据库链接地址 -->
            <prop key="url">${jdbc.conn.url}</prop>    
            <!-- 数据库账户 -->
            <prop key="username">${jdbc.conn.username}</prop>
            <!-- 数据库密码 -->    
            <prop key="password">${jdbc.conn.password}</prop> 
            <!-- 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
            <prop key="filters">${jdbc.conn.filters}</prop> 
             <!-- 最大并发连接数 -->
            <prop key="maxActive">${jdbc.conn.maxActive}</prop> 
             <!-- 初始化连接数量 -->
            <prop key="initialSize">${jdbc.conn.initialSize}</prop>
            <!-- 配置获取连接等待超时的时间 
            <prop key="maxWait">${jdbc.conn.maxWait}</prop>-->
             <!-- 最小空闲连接数 -->
            <prop key="minIdle">${jdbc.conn.minIdle}</prop>
            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
            <prop key="timeBetweenEvictionRunsMillis">${jdbc.conn.timeBetweenEvictionRunsMillis}</prop>-->
            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 
            <prop key="minEvictableIdleTimeMillis">${jdbc.conn.minEvictableIdleTimeMillis}</prop>-->
            <prop key="validationQuery">${jdbc.conn.validationQuery}</prop>
            <prop key="testWhileIdle">${jdbc.conn.testWhileIdle}</prop>
            <prop key="testOnBorrow">${jdbc.conn.testOnBorrow}</prop>
            <prop key="testOnReturn">${jdbc.conn.testOnReturn}</prop>
            <prop key="poolPreparedStatements">${jdbc.conn.poolPreparedStatements}</prop>
            <prop key="maxOpenPreparedStatements">${jdbc.conn.maxOpenPreparedStatements}</prop>
            <!-- 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) -->
            <prop key="removeAbandoned">${jdbc.conn.removeAbandoned}</prop> 
             <!-- 1800秒，也就是30分钟 
            <prop key="removeAbandonedTimeout">${jdbc.conn.removeAbandonedTimeout}</prop>-->
            <!-- 关闭abanded连接时输出错误日志 -->
            <prop key="logAbandoned">${jdbc.conn.logAbandoned}</prop>
        </props>    
    	</property>    
    </bean>  
  
    <bean id="jdbcTemplateRead" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSourceRead" />  
    </bean>  
    
    <!-- 设置数据源属性 -->  
    <bean id="dataSourceWrite" class="com.atomikos.jdbc.AtomikosDataSourceBean"  
        init-method="init" destroy-method="close">  
        <property name="uniqueResourceName" value="write_resource" />    
        <property name="xaDataSourceClassName" value="com.alibaba.druid.pool.xa.DruidXADataSource" />    
    	<property name="xaProperties">    
        <props> 
        	<!-- 数据库驱动 -->
        	<prop key="driverClassName">${jdbc.conn.driverClassName}</prop>    
        	<!-- 数据库链接地址 -->
            <prop key="url">${jdbc.conn.urlb}</prop>    
            <!-- 数据库账户 -->
            <prop key="username">${jdbc.conn.usernameb}</prop>
            <!-- 数据库密码 -->    
            <prop key="password">${jdbc.conn.passwordb}</prop> 
            <!-- 通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
            <prop key="filters">${jdbc.conn.filters}</prop> 
             <!-- 最大并发连接数 -->
            <prop key="maxActive">${jdbc.conn.maxActive}</prop> 
             <!-- 初始化连接数量 -->
            <prop key="initialSize">${jdbc.conn.initialSize}</prop>
            <!-- 配置获取连接等待超时的时间 
            <prop key="maxWait">${jdbc.conn.maxWait}</prop>-->
             <!-- 最小空闲连接数 -->
            <prop key="minIdle">${jdbc.conn.minIdle}</prop>
            <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 
            <prop key="timeBetweenEvictionRunsMillis">${jdbc.conn.timeBetweenEvictionRunsMillis}</prop>-->
            <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 
            <prop key="minEvictableIdleTimeMillis">${jdbc.conn.minEvictableIdleTimeMillis}</prop>-->
            <prop key="validationQuery">${jdbc.conn.validationQuery}</prop>
            <prop key="testWhileIdle">${jdbc.conn.testWhileIdle}</prop>
            <prop key="testOnBorrow">${jdbc.conn.testOnBorrow}</prop>
            <prop key="testOnReturn">${jdbc.conn.testOnReturn}</prop>
            <prop key="poolPreparedStatements">${jdbc.conn.poolPreparedStatements}</prop>
            <prop key="maxOpenPreparedStatements">${jdbc.conn.maxOpenPreparedStatements}</prop>
            <!-- 打开removeAbandoned功能(连接泄漏监测，怀疑存在泄漏之后再打开) -->
            <prop key="removeAbandoned">${jdbc.conn.removeAbandoned}</prop> 
             <!-- 1800秒，也就是30分钟 
            <prop key="removeAbandonedTimeout">${jdbc.conn.removeAbandonedTimeout}</prop>-->
            <!-- 关闭abanded连接时输出错误日志 -->
            <prop key="logAbandoned">${jdbc.conn.logAbandoned}</prop>  
        </props>    
    	</property> 
    </bean>  
  
    <bean id="jdbcTemplateWrite" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSourceWrite" />  
    </bean>
	
	<!-- atomikos事务管理器 -->  
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"   
        init-method="init" destroy-method="close">  
        <property name="forceShutdown">  
            <value>true</value>  
        </property>  
    </bean>  
  
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  
        <property name="transactionTimeout" value="300" />  
    </bean>  
  
    <!-- spring 事务管理器 -->  
    <bean id="jtaTransactionManager"  
        class="org.springframework.transaction.jta.JtaTransactionManager">  
        <property name="transactionManager" ref="atomikosTransactionManager"/>  
        <property name="userTransaction" ref="atomikosUserTransaction" />  
        <property name="allowCustomIsolationLevels" value="true"/>   
    </bean>  
  
  
  
    <!-- 配置事务传播特性 -->  
    <tx:advice id="transactionAdvice" transaction-manager="jtaTransactionManager">  
        <tx:attributes>  
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="move*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>  
        </tx:attributes>  
    </tx:advice>  
  
    <!-- 配置相关类的方法参与事务 -->  
    <aop:config>  
        <aop:advisor pointcut="execution(* service.*.*(..))"  
            advice-ref="transactionAdvice" />  
    </aop:config>  
  
    <!--spring会按照这个包路径进行扫描 -->  
    <context:component-scan base-package="com" />  
  
    <!-- 使用注解方式定义事务 -->  
    <tx:annotation-driven transaction-manager="jtaTransactionManager" />  
  
    <!-- 使用AspectJ方式配置AOP -->  
    <aop:aspectj-autoproxy proxy-target-class="true" />
	
</beans>